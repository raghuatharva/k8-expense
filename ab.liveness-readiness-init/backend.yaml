apiVersion: v1
kind: ConfigMap
metadata:
  name: backend
  namespace: expense
data:
  DB_HOST: mysql      # This should  the DNS name of the HEADLESS mysql service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: expense
  labels:                # This is the label of the replicaset. This is used to identify the replicaset only.
    app: nodejs             
    tier: backend
    project: expense
spec:
  replicas: 3               # Number of pods to be created
  selector:
    matchLabels:         # This should be the label of the pod to which this replicaset will manage          
      app: nodejs             
      tier: backend
      project: expense
  template:
    metadata:
      labels:             # (This is the label of the pod) this label should be same as matchLabels of selector  
        app: nodejs             
        tier: backend
        project: expense     
    spec:
      initContainers:
      - name: init-myservice
        image: busybox:1.28
        command: ['sh', '-c', "until nslookup mysql; do echo waiting for myservice; sleep 2; done"]
        # nslookup mysql --> if you only need to wait for MySQL DNS resolution (Service is created).
        # mysqladmin ping -h mysql --silent --> This is the best way to check if MySQL is ready to accept connections. 
        #but running init container should also be a mysql container only
      containers:
      - name: backend
        image: rohanraghu/backend:v1
        # resources:
        #   requests:
        #     memory: "64Mi"
        #     cpu: "250m"
        #   limits:
        #     memory: "128Mi"
        #     cpu: "500m"
        envFrom:
        - configMapRef:
            name: backend
        livenessProbe:
          httpGet: 
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
---
kind: Service
apiVersion: v1
metadata:
  name: backend
  namespace: expense
spec:
  selector:           # This is the label of the pod to which this service will route the traffic
    app: nodejs             
    tier: backend
    project: expense    
  ports:
  - name: nodejs-service
    port: 8080          # Service Port , this is for other containers to communicate with nginx container
    targetPort: 8080    # Container Port
    protocol: TCP
